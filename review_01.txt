[11:08] 
is it a C or C++ library?

[11:09] 
your implementation files are called ".cpp" but your headers have extern "C" everywhere

[11:11] 
... it's very strongly C. This is absolutely not C++, at all.

[11:14] 
you start audio directly after YOA_Init, which is not typically when you want to start it because there's nothing to do yet and there may be other changes requested at that point

[11:17] 
(also, indentation there is very wrong. Do you use a formatter?)

[11:18] 
`tempLength = ((uint32_t) len > voice->LengthRemaining) ? voice->LengthRemaining : (uint32_t) len;` -> Good sign. This looks like you've turned on warnings. Sadly, in this case you can't modify the signature of the function instead, as SDL should never ask for a negative length and now your code has gained a smell because of it.

[11:19] 
`else if(voice->IsLooping == true && voice->IsStopping == false)`
What about writing this like 
`else if(voice->IsLooping and not voice->IsStopping)` ?

[11:20] 
YoAudio.cpp, line 285. `else`. There's this "else if" just above it. When do you end up in the else case?

[11:22] 
AssetManager.cpp, that singleton is not thread safe.

[11:22] 
Who should call the Release on the singleton?

[11:23] 
AssetManager, GetPath, I would use std::filesystem or boost::filesystem there instead of an SDL implementation function and a string append.

[11:25] 
you have a major memory leak in your AssetManager, it never frees the Sound objects

[11:25] 
you check for NULL in the release function. The code you run after that check will also work if it is NULL, so you might as well always run it.

[11:32] 
what happens if I queue up a million songs at the same time?

[11:34] 
PlaySound actually doesn't play a sound, it plays a Voice.

[11:40] 
if your sample starts and/or ends with a non-zero waveform this will result in noticeable pops

[11:41] 
your special-casing for looped sounds means that when you stop them you get a free memory leak

[11:47] 
What about just passing back the Voice* to the user as an opaque pointer instead of the ID stuff?

[11:49] 
if it were an actual constructor, throw an exception. Then it's not possible to call a function on such an object as it would not exist to start with.